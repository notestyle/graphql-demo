### This file was generated by Nexus Schema
### Do not make changes to this file directly


scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input EnumGenderNullableFilter {
  equals: Gender
  in: [Gender!]
  not: NestedEnumGenderNullableFilter
  notIn: [Gender!]
}

enum Gender {
  Female
  Male
  Other
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

type Mutation {
  deleteOneUser(where: UserWhereUniqueInput!): User
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedEnumGenderNullableFilter {
  equals: Gender
  in: [Gender!]
  not: NestedEnumGenderNullableFilter
  notIn: [Gender!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableEnumGenderFieldUpdateOperationsInput {
  set: Gender
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Query {
  me: User
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, orderBy: [UserOrderByInput!], where: UserWhereInput): [User!]!
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type User {
  birthdate: DateTime
  createdAt: DateTime!
  email: String!
  firstName: String
  gender: Gender
  id: String!
  lastName: String
  picture: String
  score: Int!
  updatedAt: DateTime!
  username: String!
}

input UserOrderByInput {
  birthdate: SortOrder
  createdAt: SortOrder
  email: SortOrder
  firstName: SortOrder
  gender: SortOrder
  id: SortOrder
  lastName: SortOrder
  phoneNumber: SortOrder
  picture: SortOrder
  score: SortOrder
  teamId: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  birthdate: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: NullableStringFieldUpdateOperationsInput
  gender: NullableEnumGenderFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  phoneNumber: NullableIntFieldUpdateOperationsInput
  picture: NullableStringFieldUpdateOperationsInput
  score: IntFieldUpdateOperationsInput
  teamId: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  birthdate: DateTimeNullableFilter
  createdAt: DateTimeFilter
  email: StringFilter
  firstName: StringNullableFilter
  gender: EnumGenderNullableFilter
  id: StringFilter
  lastName: StringNullableFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  phoneNumber: IntNullableFilter
  picture: StringNullableFilter
  score: IntFilter
  teamId: StringNullableFilter
  updatedAt: DateTimeFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
  username: String
}
